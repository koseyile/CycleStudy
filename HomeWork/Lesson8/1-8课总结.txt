1-8课总结:

1.1-8课的内容都理解了吗？哪些内容是掌握得不够好的呢？
bb: 哪些内容是掌握得不够好的呢？基本了解了。对struct和状态机enum的理解有点模糊。两者都是数据结构对么。
----------------------------------
suye: 基本理解
1）对于需要传参的函数使用掌握的不好
2）对于封装的理念执行的不太透彻
----------------------------------
Hongyi: 
基本都能理解，但是在运用的时候总是会有问题。主要的问题存在在：
1）传参，当数据内容结构稍微复杂一点之后，传参就很容易弄错。
2）逻辑关系能懂，但是对于专业用语掌握得不是很好，有时候知道什么逻辑关系，但是不知道该用哪个词写。
3）后台的运算，哪种写法好哪种不好不是很明白。也不知道怎么去优化写出来的语言。
----------------------------------
zz:大体都理解了，在作业里逐步越来越理解。数组的运用与传参函数和封装优化掌握的还不够。
----------------------------------
wuwu:
1，数组，能理解，但好像没什么灵活性变通能力
2，递归,也不太理解
3，状态机：每个状态机里的时间线有些混淆;比如写的是>x秒的时候变成另外一个状态，但是不太理解x秒内发生的时候写在哪里，比如被大蛇攻击显示伤害，但我的伤害显示写在>x秒里还是前面？
4，start 、结构体、实例化、初始值设定、枚举、函数、状态机、update()这些都是可以并列的吗，前后写不搭嘎的吗？update是不是一定要在最后
----------------------------------
Naomi: 基本理解
1）对于结构体和函数的封装，执行时感到自己理解的不太透彻
2）对于递归，执行时感到自己理解的不太透彻
3）不知道怎么去优化写出来的语言
4）很多术语都不知道
----------------------------------
wupeng:
new 关键字没太理解，当new一个class和new一个struct时，在内存分配上有什么区别？
----------------------------------

2.请说一下你对面向结构编程方法的理解。
bb: 有人比喻面向过程是做盖浇饭，对面对象是做蛋炒饭。我理解面向过程/结构更是至上而下（线性？）解决一个问题。面向过程需要分开数据和函数，并让他们各自封装，以此达到高效的目的？数据驱动也是如此吗？希望之后能讲到面向对象、面向过程、数据驱动的对比，加深认识。
----------------------------------
suye: 感觉面向对象的变成结构对于各类数据类型的要求更高
比起侧重计算的编程语言，编程方式更间接一些，但是同时应用从面（UI等）也更丰富灵活一些
----------------------------------
Hongyi: 因为对其他编程方法不了解，所以没有办法用对比去讲我的理解。我就从自己学的内容来说，面向结构的编程方法更加注重函数的运算，要有比较强的逻辑关系，环环相扣。
----------------------------------
zz:没学过别的方法，目前是完全跟着一步步掌握面相结构编程的逻辑，感觉是一一对应，需要封装和嵌套可以让效率变高的方法。
----------------------------------
Wuwu：是偏向数据？完全不知道和面向对象的区别，好像写起来没什么差别的么
----------------------------------
Naomi: 没有不了解什么是面向对象的编程方法，所以有点不知道咋说。只能说，目前所学到编程方法，是好像在玩模拟人生，需要先设定一个人物，给他安排一定的基本属性（结构体），然后通过设定一些有规律的行为（函数），让他成长变化。
----------------------------------
wupeng:
我觉得面向结构编程的本质是将一系列相关或不相关的数据组织在一起进行函数操作。注意结构传体传参是值类型，在函数内部会的栈中会拷贝一份数据。
----------------------------------

3.之后有特别想学的内容吗？
bb:  
1）物理系统。 
2）AR/VR相关的着色器，渲染等。 
3）机器学习。希望接入各种类型的数据。比如声音文件，或比如有个插件是输入手势，通过机器学习识别，进行操作。 
4）希望一起学习、使用github的其他⼈人的开源项目，比如kejiro的。
----------------------------------
suye:希望先把基础打好，加大对封装思想以及传参函数的训练
----------------------------------
Hongyi: 
1）物体间的物理关系
2）shader、渲染
3）怎么把所学的内容运用到真实的项目中，比如一个游戏，分析他们运用了哪些我们所学的内容。
4）如何在一个scene中运用多个script，他们之间要如何关联。
----------------------------------
zz:我很喜欢最后面这一两次的作业，就是编程视觉化的运用，很有趣，不断调整试错也很enjoy。但是目前学的所有内容整体运用和理解的还不到位，会有一种“学了新的忘旧的”的错觉。希望之后有需要整合所有知识点，以视觉化为导向/目的的学习/巩固知识？以及一些常见游戏模式的学习。（贪吃蛇？连连看？这种）
----------------------------------
wuwu：
1）UI方面的
2) math的方法
3）unity的功能
----------------------------------
Naomi：
1）渲染器的使用和普通3d制作软件的不同？
2）能否有一些casestudy的课程？现在很多代码都看不懂。
----------------------------------

wupeng:
1）之后想学数据结构和算法在游戏中的运用，感觉自己写游戏逻辑好多是在瞎写。对一些常用的设计模式不太清楚，比如人物身上的技能系统，buff系统的设计之类的，这些应该有比较成熟的设计模式吧，但不知道如何去学习。
   如果可以有游戏编程结构设计的讲解就太好了，就是想了解怎么从0到1将游戏框架设计出来。
2）第二个是想了解Unity引擎的功能API分析吧，不过我觉得这个只有自己项目写多了，一点一点的查。
3）还想学网络方面的东西，想做可以联网的游戏，我是个网络白痴
----------------------------------


4.请委婉地评价授课的那个人，讲课时应该怎样做可以变得更好。
bb: 授课我觉得很好，问答形式也很活泼。作业量比较大， 可能还是我对面向结构不适应，知道大致怎么做的对， 但不知道怎么是做的好，有点纠结。 
可以变得更好的建议： 
1）对抽象概念，可以多几个具体例子可能更方便理解。 
2）图示的方法，例如之前 stack的视频就令人印象深刻。 
3）分析其他人的写的好的代码，有些best practice。
----------------------------------
suye：个人觉得授课人讲的很容易理解，唯一建议是可以多举些例子来演示可能会理解的更直观。
----------------------------------
Hongyi: 
1）我觉得授课内容很好，讲得很细，也比较全面。但是我可能完全是零基础，授课人觉得一些常识不用讲的问题其实我也不知道，所以往往会犯一些很低级的错误。这块我自己可能需要点时间多看点书有个了解。
2）作业讲解的时候可能因为时间的原因，所以有些内容不会分析得太细。开始我觉得看别人的代码就可以理解。但是大家写代码的习惯都不太一样，看起来也不是很懂，这个可能要在课后请教下。
3）有些概念或者函数数据都比较抽象，如果有更具体的例子可能会更好。
----------------------------------
zz:还用委婉？不用吧！猛夸一顿！！！怎么会有这么有耐心又nice的老师！！！唯一的建议是，大神可以进一步稍稍照顾到零基础学渣对编程的理解门槛，作业宜精不宜多。感恩。
----------------------------------
wuwu:
花这么多时间为我们准备上课，特别特别用心出的题，特别佩服时间管理 和 感动~~~
1）讲课的时候比较偏简单的基础概念，出题的时候突然有很多超纲概念，我们这种小白会很慌张
2）做作业和讲作业能学到非常多的东西！然后那些使用很多超纲概念的同学可以上课的时候帮我们讲讲他的理解吗，我觉得是个好方法诶，节省大神的时间，学霸也能巩固自己的知识；
3）作业量请求降低，哈哈哈，学渣想拥有996就满足了
4）可以提前一两天告诉我们要讲的概念~ 有没有什么提前了解的方法，我们上课对应用和例子可以更多的提问
----------------------------------
Naomi：
感谢老师花了这么多精力和时间，真的可以在coursera开课了哈哈。只是可能因为学生们基础不一样，上课问答环节出现了很多超纲的基础术语和概念，但让小白们提问，我们因为所知甚少也有点无从问起。。以及每周作业量对加班族有点不友好哈哈哈。
----------------------------------

wupeng:
我觉得讲的特别好，形象生动，容易理解。谢谢大神！之前做卡牌逻辑的时候就需要用到状态机，但是一直不知道该怎么合理的设计。这次练习让我了解到某种问题对应某种设计模式。我觉得如果你可以出一个游戏的题目，在玩法都确定的情况下，你来制定大的游戏框架，
然后让每一个人负责一个模块的编程，然后每隔一到两周跑一个功能版本什么的，哈哈


